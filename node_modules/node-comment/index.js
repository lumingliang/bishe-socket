var db = require('./lib/db');
var organizeTread = require('./lib/tools').organizeTread;

function Comment() {
  this.db = '';
}

Comment.prototype.add = function(comment, callback) {
  if (!comment) return callback(new Error('the object passed to the function is empty'));
  if (!comment.thread) return callback(new Error('no thread'));
  if (!comment.content) return callback(new Error('no content'));
  if (comment.parent && typeof comment.parent !== 'number') comment.parent = parseInt(comment.parent);

  this.db.add(comment, function(err, comment) {
    return callback(err, comment);
  });
}

Comment.prototype.del = function(thread, index, callback) {
  if (typeof index !== 'number') index = parseInt(index);
  this.db.delete(thread, index, function(err) {
    callback(err);
  });
}

Comment.prototype.get = function(thread, callback) {
  this.db.byThread(thread, function(err, comments) {
    if (comments.length < 1) return callback(err, comments);
    organizeTread(comments, function(err, comments) {
      callback(err, comments);
    });
  });
}

Comment.prototype.validate = function(thread, index, callback) {
  var self = this;
  if (typeof index !== 'number') index = parseInt(index);
  self.db.validateState(thread, index, function(err, validate) {
    self.db.setValidate(thread, index, validate, function(err) {
      callback(err);
    });
  });
}

Comment.prototype.allUnvalide = function(callback) {
  this.db.unvalide(function(err, unvalide) {
    callback(err, unvalide);
  });
}

function Init(options) {
  var comment = new Comment();

  if (!options) options = {};
  if (!options.port) options.port = '27017';
  if (!options.host) options.host = '127.0.0.1';
  if (!options.database) options.database = 'Comments';
  if (!options.options) options.options = {
    safe: true
  };

  comment.db = db(options);
  return comment;
}

module.exports = Init;