var should = require('should');
var organizeTread = require('../lib/tools').organizeTread;
var reposition = require('../lib/tools').reposition;
var position = require('../lib/tools').position;
var Match = require('../lib/tools').Match;
var util = require('util');

var test1 = [{
  index: 5
}, {
  index: 1
}, {
  index: 3
}, {
  index: 7
}, {
  index: 4,
  parent: 3
}, {
  index: 8
}, {
  index: 6,
  parent: 5
}, {
  index: 2,
  parent: 1
}, {
  index: 9
}];

describe('Tools', function() {

  describe('Match', function() {
    var testObj = {
      index: 'one'
    };
    it('return true', function(done) {
      Match(testObj, 'one', function(result) {
        result.should.be.ok;
        done();
      });
    });
    it('return false', function(done) {
      Match(testObj, 'two', function(result) {
        result.should.not.be.ok;
        done();
      });
    });
  });

  describe('position', function() {
    it('with value 1 return index 1', function(done) {
      position(test1, 1, function(err, result) {
        should.not.exist(err);
        result.should.eql(1);
        done();
      });
    });
    it('with value 2 return index 7', function(done) {
      position(test1, 2, function(err, result) {
        should.not.exist(err);
        result.should.eql(7);
        done();
      });
    });
    it('with an unknown value return an error', function(done) {
      position(test1, 99, function(err, result) {
        err.message.should.eql('no key for this value');
        should.not.exist(result);
        done();
      });
    });
  });

  describe('reposition', function() {
    it('return an array with child after parent', function(done) {
      reposition(test1, {
        index: 2,
        parent: 1
      }, function(err, result) {
        should.not.exist(err);
        result[2].index.should.eql(2);
        done();
      });
    });
    it('without parent return nothing', function(done) {
      reposition(test1, {
        index: 5
      }, function(err, result) {
        should.not.exist(err);
        result.should.eql(test1);
        done();
      });
    });
  });

  describe('organizeTread', function() {
    it('return an organize tread', function(done) {
      organizeTread(test1, function(err, result) {
        should.not.exist(err);
        result[1].index.should.eql(6);
        result[3].index.should.eql(2);
        result[5].index.should.eql(4);
        done();
      });
    });
  });



});