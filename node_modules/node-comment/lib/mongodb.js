var mongo = require('mongoskin');
var util = require('util');

function Mongodb(db) {
  this.db = db.collection('comments');
}

Mongodb.prototype.add = function(comment, callback) {
  comment.index = Date.now();
  this.db.insert(comment, {
    strict: true
  }, function(err, comment) {
    callback(err, comment[0]);
  });
}

Mongodb.prototype.delete = function(thread, index, callback) {
  this.db.remove({
    thread: thread,
    index: index
  }, {
    strict: true
  }, function(err) {
    callback(err);
  });
}

Mongodb.prototype.byThread = function(thread, callback) {
  this.db.find({
    thread: thread
  }).sort({
    index: 1
  }).toArray(function(err, comments) {
    callback(err, comments);
  });
}

Mongodb.prototype.validateState = function(thread, index, callback) {
  this.db.findOne({
    thread: thread,
    index: index,
    validate: {
      $exists: true
    }
  }, {
    validate: 1
  }, function(err, res) {
    if (res && res.validate === true) return callback(err, false);
    return callback(err, true);
  });
}

Mongodb.prototype.setValidate = function(thread, index, state, callback) {
  this.db.update({
    thread: thread,
    index: index
  }, {
    $set: {
      validate: state
    }
  }, function(err) {
    callback(err);
  });
}

Mongodb.prototype.unvalide = function(callback) {
  this.db.find({
    validate: {
      $exists: false
    }
  }).toArray(function(err, unvalide) {
    callback(err, unvalide);
  });
}

function Init(args) {
  var db = mongo.db(args.host + ':' + args.port + '/' + args.database + '?auto_reconnect', {
    safe: true
  });

  return new Mongodb(db);
}

module.exports = Init;