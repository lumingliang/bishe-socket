var async = require('async');

function Move(arr, old_index, new_index) {
  if (new_index >= arr.length) {
    var k = new_index - arr.length;
    while ((k--) + 1) {
      arr.push(undefined);
    }
  }
  arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
  return arr;
};

var Match = exports.Match = function(obj, value, callback) {
  if (obj.index == value) return callback(true);
  else return callback(false);
}

var position = exports.position = function(arr, value, callback) {
  var nb = arr.length;

  function repeater(i) {
    if (i < nb) {
      Match(arr[i], value, function(isMatch) {
        if (isMatch) return callback(null, i);
        if (i === nb - 1) return callback(new Error('no key for this value'));
        repeater(i + 1);
      });
    }
  }
  repeater(0);
}

var reposition = exports.reposition = function(arr, child, callback) {
  if (!child.parent) return callback(null, arr);
  position(arr, child.parent, function(err, indexParent) {
    position(arr, child.index, function(err, indexChild) {
      if (indexChild !== indexParent + 1 && typeof indexChild !== 'undefined') Move(arr, indexChild, indexParent + 1);
      callback(err, arr);
    });
  });
}

var organizeTread = exports.organizeTread = function(thread, callback) {
  var nb = thread.length;
  function repeater(i, thread) {
    if (i < nb) {
      reposition(thread, thread[i], function(err, thread) {
        if (i === nb - 1) return callback(err, thread);
        repeater(i + 1, thread);
      });
    }
  }
  repeater(0, thread);
}